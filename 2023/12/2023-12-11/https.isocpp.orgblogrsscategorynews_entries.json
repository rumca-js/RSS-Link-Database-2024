[{"source": "https://isocpp.org/blog/rss/category/news", "title": "Striving For Better C++ Code, Part I: Data Flow Analysis Basics -- Anastasia Kazakova", "description": "<p>\n\t<img alt=\"Anastasia-200x200.jpg\" src=\"https://isocpp.org/files/img/Anastasia-200x200.jpg\" style=\"width: 200px; margin: 10px; float: right;\" />We&rsquo;ll look at the basics of data flow analysis, including how it works in general, while presenting several real-world examples where it can help you write better code.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://blog.jetbrains.com/clion/2023/11/striving-for-better-cpp-code-part-i-data-flow-analysis-basics/\">Striving For Better C++ Code, Part I: Data Flow Analysis Basics</a></h3>\n\t<p>\n\t\tby Anastasia Kazakova</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tAll data flow inspections rely on the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Control-flow_graph\" rel=\"noopener\" target=\"_blank\">control-flow graph</a>. This is a graph on which vertices are the statements in the program and edges are the control flow jumps between these statements (direct code execution, conditional jumps, loops, breaks, gotos, etc.).</p>\n\t<p>\n\t\t", "link": "https://isocpp.org//blog/2023/12/striving-for-better-cpp-code-part-i-data-flow-analysis-basics-anastasia-kaz", "date_published": "2023-12-11T23:29:15+00:00", "permanent": false, "bookmarked": false, "dead": false, "artist": "Standard C++ | News", "album": "Standard C++ | News", "user": null, "language": "en", "thumbnail": null, "age": null, "page_rating_contents": 0, "page_rating_votes": 0, "page_rating_visits": 0, "page_rating": 0, "tags": [], "comments": [], "vote": 0}]