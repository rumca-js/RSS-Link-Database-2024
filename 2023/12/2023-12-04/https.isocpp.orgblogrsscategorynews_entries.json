[{"source": "https://isocpp.org/blog/rss/category/news", "title": "How to use std::span from C++20 -- Bartlomiej Filipek", "description": "<p>\n\t<img alt=\"How_to_use_std_span_from_C++20.png\" src=\"https://isocpp.org/files/img/How_to_use_std_span_from_C++20.png\" style=\"width: 400px; margin: 10px; float: right;\" />In this article, we&rsquo;ll look at&nbsp;<code>std::span</code>&nbsp;which is more generic than&nbsp;<code>string_view</code>&nbsp;and can help work with arbitrary contiguous collections.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.cppstories.com/2023/span-cpp20/\">How to use std::span from C++20</a></h3>\n\t<p>\n\t\tby Bartlomiej Filipek</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tHere&rsquo;s an example that illustrates the primary use case for&nbsp;<code>std::span</code>:</p>\n\t<p>\n\t\tIn traditional C (or low-level C++), you&rsquo;d pass an array to a function using a pointer and a size like this:</p>\n\t<pre class=\"prettyprint lang-cpp\">\nvoid process_array(int* arr, std::size_t size) {&#10;&nbsp; for(std::size_t i = 0; i &lt; size; ++i) {&#10;&nbsp;&nbsp;&nbsp; // do something with arr[i]&#10;&nb", "link": "https://isocpp.org//blog/2023/12/how-to-use-stdspan-from-cpp20-bartlomiej-filipek", "date_published": "2023-12-04T18:01:56+00:00", "permanent": false, "bookmarked": false, "dead": false, "artist": "Standard C++ | News", "album": "Standard C++ | News", "user": null, "language": "en", "thumbnail": null, "age": null, "page_rating_contents": 0, "page_rating_votes": 0, "page_rating_visits": 0, "page_rating": 0, "tags": [], "comments": [], "vote": 0}]