[{"source": "https://isocpp.org/blog/rss/category/news", "title": "How Can I Prevent Myself From Using a Parameter After I\u2019ve Extracted All Value? -- Raymond Chen", "description": "<p>\n\tImagine you have a function parameter that you want to protect from direct access, ensuring that all future interactions occur through a wrapper or transformation. This situation often arises in scenarios like implementing a logging wrapper for a class. In this discussion, we'll explore a clever technique known as \"hide_name\" to achieve this goal, allowing you to enforce the use of the wrapper and prevent direct access to the parameter.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20230915-00/?p=108775\">How Can I Prevent Myself From Using a Parameter After I&rsquo;ve Extracted All Value From It?</a></h3>\n\t<p>\n\t\tBy Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tSuppose you have a function that takes a parameter that you want to transform in some way, and you want to require that all future access to the parameter be done through the transformed version. One example is a wrapper class that does logging.&sup1;</p>\n\t<pre", "link": "https://isocpp.org//blog/2023/12/how-can-i-prevent-myself-from-using-a-parameter-after-ive-extracted-all-val", "date_published": "2023-12-18T23:28:29+00:00", "permanent": false, "bookmarked": false, "dead": false, "artist": "Standard C++ | News", "album": "Standard C++ | News", "user": null, "language": "en", "thumbnail": null, "age": null, "page_rating_contents": 0, "page_rating_votes": 0, "page_rating_visits": 0, "page_rating": 0, "tags": [], "comments": [], "vote": 0}]