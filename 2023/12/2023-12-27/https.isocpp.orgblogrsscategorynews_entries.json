[{"source": "https://isocpp.org/blog/rss/category/news", "title": "C++20, Spans, Threads and Fun -- Bartlomiej Filipek", "description": "<p>\n\t<img alt=\"C++20_Spans_Threads_and_Fun.png\" src=\"https://isocpp.org/files/img/C++20_Spans_Threads_and_Fun.png\" style=\"width: 372px; margin: 10px; float: right;\" />In this post, we&rsquo;ll have fun using C++20&rsquo;s spans to process data on multiple threads. What&rsquo;s more, we&rsquo;ll be equipped with the latest concurrency features from C++20.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.cppstories.com/2023/spans-threads-cpp20/\">C++20, Spans, Threads and Fun</a></h3>\n\t<p>\n\t\tby Bartlomiej Filipek</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tOur task is relatively simple but can be extended to various multi-phase computations.</p>\n\t<p>\n\t\tWe need to initialize a container with numbers, filter them, then build a histogram.</p>\n\t<p>\n\t\tHere&rsquo;s the overview of the process:</p>\n\t<p>\n\t\t<img alt=\"\" src=\"https://www.cppstories.com/2023/images/spans_threads_diag.png\" /></p>\n</blockquote>", "link": "https://isocpp.org//blog/2023/12/cpp20-spans-threads-and-fun-bartlomiej-filipek", "date_published": "2023-12-27T23:29:09+00:00", "permanent": false, "bookmarked": false, "dead": false, "artist": "Standard C++ | News", "album": "Standard C++ | News", "user": null, "language": "en", "thumbnail": null, "age": null, "page_rating_contents": 0, "page_rating_votes": 0, "page_rating_visits": 0, "page_rating": 0, "tags": [], "comments": [], "vote": 0}]