[{"source": "https://isocpp.org/blog/rss/category/news", "title": "When an Empty Destructor is Required -- Andreas Fertig", "description": "<p>\n\t<img alt=\"me.png\" src=\"https://isocpp.org/files/img/me.png\" style=\"width: 350px; margin: 10px; float: right;\" />In my previous post, \"<a href=\"http://andreasfertig.blog/2023/11/why-you-shouldnt-provide-an-empty-destructor/\">Why you shouldn't provide an empty destructor</a>,\" we discussed the importance of not providing an empty destructor in most cases. However, in this post, we'll explore a rare exception to this rule that arises when using the PImpl idiom to hide implementation details, specifically in situations where the <code>unique_ptr </code>encounters issues with incomplete types. Let's delve into this exception and learn when it's necessary to provide an empty destructor.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://andreasfertig.blog/2023/12/when-an-empty-destructor-is-required/\"><strong>When an Empty Destructor is Required</strong></a></h3>\n\t<p>\n\t\tby Andreas Fertig</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tAs you probably know from life, not only p", "link": "https://isocpp.org//blog/2024/01/when-an-empty-destructor-is-required-andreas-fertig", "date_published": "2024-01-02T11:47:19+00:00", "permanent": false, "bookmarked": false, "dead": false, "artist": "Standard C++ | News", "album": "Standard C++ | News", "user": null, "language": "en", "thumbnail": null, "age": null, "page_rating_contents": 0, "page_rating_votes": 0, "page_rating_visits": 0, "page_rating": 0, "tags": [], "comments": [], "vote": 0}]