[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_published": "2024-11-25T19:41:30+00:00",
        "description": "<p>\n\t<img alt=\"Jb7DBcxe_400x400.jpg\" src=\"https://isocpp.org/files/img/Jb7DBcxe_400x400.jpg\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />Recent versions of the C++ language (C++20 and C++23) may allow you to change drastically how you program in C++. I want to provide some fun examples.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://lemire.me/blog/2024/11/02/having-fun-with-modern-c/\">Having Fun with Modern C++</a></h3>\n\t<p>\n\t\tby Daniel Lemire</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tThanks to the integration of the features from the popular fmt library, it is much easier to format strings elegantly in C++. In turn the fmt library was inspired by the work done in languages like Python.</p>\n\t<p>\n\t\tSuppose that you have a vector of integers and you want to print its content:</p>\n\t<pre class=\"prettyprint lang-cpp\">\nstd::vector&lt;int&gt; v = {1, 2, 3, 4, 5};&#10;std::println(\"{}\", v);</pre>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tSuppose you want it t",
        "id": 1584606,
        "language": null,
        "link": "https://isocpp.org//blog/2024/11/having-fun-with-modern-cpp-daniel-lemire",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Having Fun with Modern C++ -- Daniel Lemire",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_published": "2024-11-25T18:27:26+00:00",
        "description": "<p>\n\tNew video on the CopperSpice YouTube Channel:</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=XQUMl3V_rdI\">std::launder</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Barbara Geller and Ansel Sermersheim</p>\n</blockquote>\n<p>\n\tAbout the video:</p>\n<blockquote>\n\t<p>\n\t\tOur recent C++ video started a lively conversation. We showed a use case for std::launder which caught several developers off guard. A new compiler setting was enabled which exposed a problem in our existing code. Please watch the full video to find out what we learned.</p>\n\t<p>\n\t\tTake a look and remember to subscribe.</p>\n</blockquote>",
        "id": 1584607,
        "language": null,
        "link": "https://isocpp.org//blog/2024/11/copperspice-stdlaunder",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "CopperSpice: std::launder",
        "vote": 0
    }
]