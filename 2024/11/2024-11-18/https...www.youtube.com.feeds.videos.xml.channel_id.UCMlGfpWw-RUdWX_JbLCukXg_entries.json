[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-11-18T16:00:03+00:00", "description": "https://cppcon.org\u200b\n---\n\nC++ Relocation - How to Achieve Blazing Fast Save and Restore and More! - Eduardo Madrid - CppCon 2024\n---\n\nProgramming normal C++ leads to the use of dynamic memory, pointer chasing, and other issues that zap performance. Because there haven\u2019t been practical solutions to those problems we seldom discuss them, creating the impression that they are unavoidable. Fortunately, the same C++ that binds us frees us to devise techniques centered around the concept of \u201crelocatability\u201d to solve those issues. We will explain what relocatability is and how to achieve it.\n\nConsider the example of runtime polymorphism. You may want to have interfaces and implementations of interfaces. If your object refers to a \u201cpolymorphic\u201d member, it normally cannot be implemented as a concrete sub-object, only as a base class pointer that points to a dynamically allocated instance of a derived class. This leads to millions of small objects dispersed throughout memory, all referencing on", "id": 1536809, "language": null, "link": "https://www.youtube.com/watch?v=LnGrrfBMotA", "manual_status_code": 0, "page_rating": 27, "page_rating_contents": 86, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 420, "source_url": "https://www.youtube.com/feeds/videos.xml?channel_id=UCMlGfpWw-RUdWX_JbLCukXg", "status_code": 0, "tags": [], "thumbnail": "https://i1.ytimg.com/vi/LnGrrfBMotA/hqdefault.jpg", "title": "C++ Relocation - How to Achieve Blazing Fast Save and Restore and More! - Eduardo Madrid - CppCon 24", "vote": 0}]