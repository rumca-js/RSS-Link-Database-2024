[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-06-20T09:00:00+00:00", "description": "<article>\n\t<section class=\"page\">\n<p>Azure CTO Mark Russinovich\u2019s annual Azure infrastructure presentations at Build are always fascinating as he explores the past, present, and future of the hardware that underpins the cloud. <a href=\"https://build.microsoft.com/en-US/sessions/984ca69a-ffca-4729-bf72-72ea0cd8a5db\" rel=\"nofollow\">This year\u2019s talk was no different</a>, focusing on the same AI platform touted in the rest of the event.</p><p>Over the years it\u2019s been clear that Azure\u2019s hardware has grown increasingly complex. At the start, it was a prime example of utility computing, using a single standard server design. Now it\u2019s many different server types, able to support all classes of workloads. GPUs were added and now AI accelerators.</p><p class=\"jumpTag\"><a href=\"/article/3715661/inside-todays-azure-ai-cloud-data-centers.html#jump\">To read this article in full, please click here</a></p></section></article>", "id": 744040, "language": "en-us", "link": "https://www.infoworld.com/article/3715661/inside-todays-azure-ai-cloud-data-centers.html#tk.rss_all", "manual_status_code": 0, "page_rating": 32, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "http://www.infoworld.com/index.rss", "source_obj__id": 151, "status_code": 0, "tags": [], "thumbnail": "https://images.idgesg.net/images/article/2022/10/istock-1275073399-100933369-small.jpg", "title": "Inside today\u2019s Azure AI cloud data centers", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-06-20T09:00:00+00:00", "description": "<article>\n\t<section class=\"page\">\n<p>When designing applications, it is important to know when to use an abstract class and when to use an interface. Although abstract classes and interfaces seem similar in some ways, there are key differences that will determine which is the best choice for what you\u2019re trying to accomplish. In this blog post I\u2019ll discuss those differences and how to decide when to use which.</p><p>The short answer: An abstract class allows you to create functionality that subclasses can implement or override. An interface only allows you to define functionality, not implement it. And whereas a class can extend only one abstract class, it can take advantage of multiple interfaces.\u00a0</p><p class=\"jumpTag\"><a href=\"/article/2928719/when-to-use-an-abstract-class-vs-interface-in-csharp.html#jump\">To read this article in full, please click here</a></p></section></article>", "id": 744415, "language": "en-us", "link": "https://www.infoworld.com/article/2928719/when-to-use-an-abstract-class-vs-interface-in-csharp.html#tk.rss_all", "manual_status_code": 0, "page_rating": 32, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "http://www.infoworld.com/index.rss", "source_obj__id": 151, "status_code": 0, "tags": [], "thumbnail": "https://images.techhive.com/images/article/2016/11/apple_orange-100691916-small.jpg", "title": "When to use an abstract class vs. interface in C#", "user": null, "vote": 0}]