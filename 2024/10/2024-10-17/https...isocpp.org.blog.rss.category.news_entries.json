[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-10-17T17:21:51+00:00", "description": "<p>\n\t<img alt=\"El5Swmxm_400x400.jpg\" src=\"https://isocpp.org/files/img/El5Swmxm_400x400.jpg\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />In C++20, the standard library introduced new synchronization primitives:&nbsp;std::latch&nbsp;and&nbsp;std::barrier. These are the utilities designed to coordinate between concurrent threads.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.kdab.com/synchronization-primitives-in-c20/\">Synchronization Primitives in C++20</a></h3>\n\t<p>\n\t\tby Shivam Kunwar</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\t<strong>What is a synchronization primitive?</strong></p>\n\t<p>\n\t\tIn concurrent programming, synchronization primitives are the fundamental tools that help in managing the coordination, execution order, and data safety of multiple threads or processes that run concurrently.</p>\n\t<p>\n\t\tBriefly said, they ensure that:</p>\n\t<ul>\n\t\t<li>\n\t\t\tmultiple threads don&rsquo;t simultaneously execute some specific segment of code (a", "id": 1343493, "language": null, "link": "https://isocpp.org//blog/2024/10/synchronization-primitives-in-cpp20-shivam-kunwar", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "Synchronization Primitives in C++20 -- Shivam Kunwar", "vote": 0}]