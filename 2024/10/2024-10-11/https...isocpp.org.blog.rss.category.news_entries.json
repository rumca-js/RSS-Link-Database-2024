[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-10-11T17:07:06+00:00", "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />When working with C++ standard containers and functions, handling references can sometimes lead to unexpected behavior, particularly with copy semantics. This is where <code>std::ref</code> and <code>std::cref</code> come into play, allowing you to store references in containers and pass them safely to template functions like <code>std::bind</code> or <code>std::thread</code>.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2024/08/21/std-ref\">What is std::ref?</a></h3>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tHave you heard about&nbsp;<code>std::ref</code>&nbsp;and&nbsp;<code>std::cref</code>? The helper functions that generate objects of type&nbsp;<code>std::reference_wrapper</code>? The answer is probably yes. In that case, this article is probably not for", "id": 1308822, "language": null, "link": "https://isocpp.org//blog/2024/10/what-is-stdref-sandor-dargo", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "What is std::ref? -- Sandor Dargo", "vote": 0}]