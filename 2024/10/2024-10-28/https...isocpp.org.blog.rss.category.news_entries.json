[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-10-28T17:32:50+00:00", "description": "<p>\n\t<img alt=\"me.png\" src=\"https://isocpp.org/files/img/me.png\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />A post I wrote back in 2023&nbsp;<a href=\"https://andreasfertig.blog/2023/12/when-an-empty-destructor-is-required/\">When an empty destructor is required</a>&nbsp;resulted in feedback that I&#39;d like to address in today&#39;s post.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://andreasfertig.blog/2024/10/smart-pointers-and-the-pointer-to-implementation-idiom/\">Smart Pointers and the Pointer to Implementation Idiom</a></h3>\n\t<p>\n\t\tby Andreas Fertig</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tIn the 2023 post, I briefly mentioned&nbsp;<a href=\"https://en.cppreference.com/w/cpp/language/pimpl\" target=\"_blank\">PImpl idiom</a>. I did not intend to make it the theme of the post. However, I got various questions about PImpl and smart pointers.</p>\n\t<p>\n\t\tThe goal of PImpl is to hide implementation details from clients. Since you can declare a p", "id": 1402837, "language": null, "link": "https://isocpp.org//blog/2024/10/smart-pointers-and-the-pointer-to-implementation-idiom-andreas-fertig", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "Smart Pointers and the Pointer to Implementation Idiom -- Andreas Fertig", "vote": 0}]