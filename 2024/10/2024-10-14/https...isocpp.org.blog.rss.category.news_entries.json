[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-10-14T17:14:46+00:00", "description": "<p>\n\t<img alt=\"me.png\" src=\"https://isocpp.org/files/img/me.png\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />When you transition from older C++ standards like C++11 or C++14 to the latest C++17 and C++20 it can be a tough journey. It&#39;s essential for writing clean and easy-to-maintain code, but many developers find the process challenging.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://andreasfertig.blog/2024/08/write-modern-code-with-features-of-cpp17-and-cpp20/\">Write Modern Code with Features of C++17 and C++20</a></h3>\n\t<p>\n\t\tby Andreas Fertig</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tHere are three common hurdles:</p>\n\t<p>\n\t\t<strong>1. Variety of New Features</strong><br />\n\t\t<br />\n\t\tAdapting to C++17 and C++20 can be intimidating. As the latest standards offer a wide range of new features and syntax changes. One such feature is the introduction of structured bindings in C++17, which represents a shift from how variables were tradition", "id": 1322915, "language": null, "link": "https://isocpp.org//blog/2024/10/write-modern-code-with-features-of-cpp17-and-c20-andreas-fertig", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "Write Modern Code with Features of C++17 and C++20 -- Andreas Fertig", "vote": 0}]