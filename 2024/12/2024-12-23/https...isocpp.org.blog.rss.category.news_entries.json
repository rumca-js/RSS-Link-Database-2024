[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2024-12-23T20:34:13+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />Some time ago, I noted that&nbsp;<a href=\"https://devblogs.microsoft.com/oldnewthing/20190227-00/?p=101072\" title=\"The std::map subscript operator is a convenience, but a potentially dangerous one\">the&nbsp;<code>std::map</code>&nbsp;subscript operator is an attractive nuisance</a>. It is the most convenient syntax, but is not often what you actually want.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20241118-00/?p=110535\">The Operations for Reading and Writing Single Elements for C++ Standard Library Maps</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\tI&rsquo;ve broken down the various&nbsp;<code>std::map</code>&nbsp;lookup and update operations into a table so you can choose the best one for your situation.</blockquote>\n<blockquote>\n\t<img alt=\"2024-11",
        "id": 1769789,
        "language": null,
        "link": "https://isocpp.org//blog/2024/12/the-operations-for-reading-and-writing-single-elements-for-cpp-standard-lib",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "The Operations for Reading and Writing Single Elements for C++ Standard Library Maps -- Raymond Chen",
        "vote": 0
    }
]