[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2024-12-26T09:00:00+00:00",
        "description": "<div id=\"remove_no_follow\">\n\t\t<div class=\"grid grid--cols-10@md grid--cols-8@lg article-column\">\n\t\t\t\t\t  <div class=\"col-12 col-10@md col-6@lg col-start-3@lg\">\n\t\t\t\t\t\t<div class=\"article-column__content\">\n<section class=\"wp-block-bigbite-multi-title\"><div class=\"container\"></div></section>\n\n\n\n<p>Optimizing the performance of your .NET applications requires efficient resource management. Memory allocations and deallocations must be performed optimally in performance-critical applications. One of the best strategies to perform resource management in an optimal way in an application is by allocating and deallocating string objects judiciously.</p>\n\n\n\n<p>C# provides the string.Split() method to split strings in .NET applications. However, we have a better alternative, the ReadOnlySpan<char>.Split() method, which accomplishes the same thing in a much more efficient way. In this article, we\u2019ll examine the performance drawbacks of the string.Split() method and illustrate how the ReadOnlySpan<",
        "id": 1781671,
        "language": "en-US",
        "link": "https://www.infoworld.com/article/3626790/how-to-split-strings-efficiently-in-c-sharp.html",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 468,
        "source_url": "https://www.infoworld.com/feed/",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to split strings efficiently in C#",
        "vote": 0
    }
]