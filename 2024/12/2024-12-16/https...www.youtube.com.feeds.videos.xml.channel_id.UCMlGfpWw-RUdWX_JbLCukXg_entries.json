[
    {
        "age": null,
        "album": "",
        "author": "CppCon",
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2024-12-16T15:07:05+00:00",
        "description": "https://cppcon.org\u200b\n---\n\nLLVM's Realtime Safety Revolution: Tools for Modern Mission Critical Systems - Christopher Apple & David Trevelyan - CppCon 2024\n---\n\n\"ERROR: RealtimeSanitizer: call to malloc detected during execution of realtime function MyAudioCallback::process!\"\n\n\"Warning: MyAudioCallback::process must not call blocking fuction \u2018SkectchyCall`\"\n\nRealtime programmers working on mission-critical audio, autonomous vehicle, and aerospace code are well-acquainted with the golden rule: \u201cThou shalt not call time-unbounded operations in your realtime thread.\u201d Despite its importance, tools to enforce this rule have been non-existent\u2014until now!\n\nIn the latest version of Clang, two new features help uphold realtime guarantees by preventing `malloc`, system calls, and user-defined \"unsafe\" functions. First, we introduce the Realtime Sanitizer, which detects calls to `malloc`, `pthread_mutex_lock`, and other problematic functions in your realtime code at runtime. Next, we explore the `",
        "id": 1720580,
        "language": null,
        "link": "https://www.youtube.com/watch?v=KvhgNdxX6Uw",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 420,
        "source_url": "https://www.youtube.com/feeds/videos.xml?channel_id=UCMlGfpWw-RUdWX_JbLCukXg",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://i4.ytimg.com/vi/KvhgNdxX6Uw/hqdefault.jpg",
        "title": "LLVM's Realtime Safety Revolution: Tools for Modern Mission Critical Systems - CppCon 2024",
        "vote": 0
    }
]