[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2024-12-11T20:05:49+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />The <code>std::optional&lt;T&gt;</code> is a powerful tool for handling optional values, but assigning non-trivial types like <code>Doodad</code> to it can lead to unexpected compilation errors. This post explores why such assignments fail and unpacks the nuances of <code>std::optional</code> and type construction in modern C++.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20241113-00/?p=110516\">The Puzzle of Trying to Put an Object into a std::optional</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tThe C++ standard library template type&nbsp;<code>std::<wbr />optional&lt;T&gt;</code>&nbsp;has one of two states. It could be empty (not contain anything), or it could contain a&nbsp;<code>T</code>.</p>\n\t<p>\n\t\tSuppose you start with an empty&nbsp;<cod",
        "id": 1691246,
        "language": null,
        "link": "https://isocpp.org//blog/2024/12/the-puzzle-of-trying-to-put-an-object-into-a-stdoptional-raymond-chen",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "The Puzzle of Trying to Put an Object into a std::optional -- Raymond Chen",
        "vote": 0
    }
]