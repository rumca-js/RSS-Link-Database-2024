[{"page_rating_contents": 0, "tags": [], "vote": 0, "title": "Iteration Revisited: A Safer Iteration Model for Cpp - Tristan Brindle - CppCon 2023", "page_rating_votes": 0, "artist": "CppCon", "source": "https://www.youtube.com/feeds/videos.xml?channel_id=UCMlGfpWw-RUdWX_JbLCukXg", "bookmarked": false, "date_published": "2024-03-12T16:04:18+00:00", "permanent": false, "dead": false, "user": null, "page_rating": 0, "thumbnail": "https://i3.ytimg.com/vi/nDyjCMnTu7o/hqdefault.jpg", "album": "", "age": null, "comments": [], "link": "https://www.youtube.com/watch?v=nDyjCMnTu7o", "page_rating_visits": 0, "source_obj__id": 420, "language": null, "description": "https://cppcon.org/\n---\n\nIteration Revisited: A Safer Iteration Model for Cpp - Tristan Brindle - CppCon 2023\nhttps://github.com/CppCon/CppCon2023\n\n\u201cSafety\u201d is the word on everyone\u2019s lips at the moment. Unfortunately for C++ programmers, one of our most fundamental abstractions \u2014 iterators \u2014 are fraught with danger. Prone to out-of-bounds memory accesses, unexpected invalidation and dangling, iterators are a UB minefield in which even experts can find themselves in trouble.\nFortunately there is something we can do about it.\n\nIn this talk we\u2019ll look at an alternative, safer abstraction for iterating over sequences and introduce Flux, a new C++20 library implementing these ideas. We\u2019ll see how Flux retains all of the power and flexibility of the existing STL, but greatly reduces the potential for UB through careful design and implementation choices \u2014 all while offering compatibility with existing code. We\u2019ll also take a look at performance and examine the cost of universal boun"}]