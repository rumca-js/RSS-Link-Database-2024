[{"album": "", "permanent": false, "artist": null, "page_rating_votes": 0, "title": "C++20 Concepts Applied \u2013 Safe Bitmasks Using Scoped Enums --  Andreas Fertig", "language": "en", "bookmarked": false, "page_rating_contents": 0, "source_obj__id": 314, "user": null, "dead": false, "page_rating": 0, "date_published": "2024-03-11T20:15:59+00:00", "page_rating_visits": 0, "vote": 0, "thumbnail": null, "link": "https://isocpp.org//blog/2024/03/cpp20-concepts-applied-safe-bitmasks-using-scoped-enums-andreas-fertig", "age": null, "comments": [], "source": "https://isocpp.org/blog/rss/category/news", "tags": [], "description": "<p>\n\t<img alt=\"logo.png\" src=\"https://isocpp.org/files/img/logo.png\" style=\"width: 225px; margin: 10px; float: right;\" />It can be hard to follow code using enable_if. Andreas Fertig gives a practical example where C++20&rsquo;s concepts can be used instead.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accu.org/journals/overload/32/179/fertig/\">C++20 Concepts Applied &ndash; Safe Bitmasks Using Scoped Enums</a></h3>\n\t<p>\n\t\tby Andreas Fertig</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tThe idea is that the bit-operators are often used with enums to create bitmasks. Filesystem permissions are one example. Essentially you want to be able to write type-safe code like this:</p>\n\t<pre class=\"prettyprint lang-cpp\">\nusing Filesystem::Permission;&#10;Permission readAndWrite{&#10;&nbsp; Permission::Read | Permission::Write};&#10;</pre>\n\t<p>\n\t\tThe enum&nbsp;<code>Permission</code>&nbsp;is a class enum, making the code type-safe. Now, all of you who once have dealt with "}, {"album": "", "permanent": false, "artist": null, "page_rating_votes": 0, "title": "Announcing the full ACCU 2024 Conference schedule -- ACCU &amp; ShavedYaks", "language": "en", "bookmarked": false, "page_rating_contents": 0, "source_obj__id": 314, "user": null, "dead": false, "page_rating": 0, "date_published": "2024-03-11T18:58:08+00:00", "page_rating_visits": 0, "vote": 0, "thumbnail": null, "link": "https://isocpp.org//blog/2024/03/announcing-the-full-accu-2024-schedule", "age": null, "comments": [], "source": "https://isocpp.org/blog/rss/category/news", "tags": [], "description": "<p>\n\tThe full ACCU 2024 Conference schedule is live:</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accuconference.org/news/announcing-the-full-accu-2024-schedule\">Announcing the full ACCU 2024 Conference schedule<img alt=\"\" src=\"https://isocpp.org/files/img/logo2024.png\" style=\"width: 230px; height: 82px; float: right;\" /></a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby ACCU &amp; ShavedYaks</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tA little later than expected, due to some logistical issues, but we can now finally announce the full schedule for the 2024 ACCU Conference - and it's going to be awesome!</p>\n</blockquote>"}]