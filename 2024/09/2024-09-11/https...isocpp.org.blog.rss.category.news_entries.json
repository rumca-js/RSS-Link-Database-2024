[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-11T21:17:02+00:00", "description": "<p>\n\t<strong><img alt=\"\" src=\"https://avatars.sched.co/5/f8/15024062/avatar.jpg?5aa\" style=\"width: 250px; height: 250px; float: right;\" />Registration is now open for CppCon 2024!</strong> The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org\">in person in Aurora, CO</a>.&nbsp;To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting some upcoming talks that you will be able to attend this year. Here&rsquo;s another CppCon future talk we hope you will enjoy &ndash; and&nbsp;<strong><a href=\"https://cppcon.org/registration/\">register today</a> for CppCon 2024!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://cppcon2024.sched.com/event/1gZfV/contracts-for-c\">Contracts for C++</a></h3>\n\t<p>\n\t\tWednesday, September 18 14:00 - 15:00 MDT</p>\n\t<p>\n\t\tby Timur Doumler</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tDesign by Contract is a very effective approach for writing safer, more correct programs. It has been succes", "id": 1128186, "language": null, "link": "https://isocpp.org//blog/2024/09/cppcon-2024-contracts-for-cpp-timur-doumler", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "CppCon 2024 Contracts for C++ -- Timur Doumler", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-11T21:06:33+00:00", "description": "<p>\n\tIn previous posts, we&#39;ve explored relocation, trivial relocation, and their use in optimizing data structures like vector-like containers. We&#39;ve also examined how trivial relocation relates to move assignments, enabling further optimization of operations like swaps and algorithms such as <code>std::sort</code> and <code>std::rotate</code>.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.kdab.com/qt-and-trivial-relocation-part-5/\">Qt and Trivial Relocation (Part 5)</a></h3>\n\t<p>\n\t\tby Giuseppe D&#39;Angelo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\t<strong>Is trivial relocation allowed in Standard C++?</strong></p>\n\t<p>\n\t\tThat&rsquo;s probably a question we should have asked as soon as we started this journey. Of course, the answer is&nbsp;no, it is not allowed!</p>\n\t<p>\n\t\tRemember how trivial relocation works: we use&nbsp;<tt>memcpy</tt>&nbsp;a source object(&lsquo;s representation) into some storage, and claim that operation realizes the equivalent of ", "id": 1128187, "language": null, "link": "https://isocpp.org//blog/2024/09/qt-and-trivial-relocation-part-5-giuseppe-dangelo", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "Qt and Trivial Relocation (Part 5) -- Giuseppe D'Angelo", "user": null, "vote": 0}]