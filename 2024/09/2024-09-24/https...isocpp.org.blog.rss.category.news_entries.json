[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-24T21:44:19+00:00", "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />In C++, it&#39;s common to use RAII types like <code>std::lock_guard</code> to manage synchronization primitives, ensuring a lock is acquired at object creation and released at destruction. However, a less common but useful pattern is the \"anti-lock,\" which temporarily releases a lock and reacquires it later, useful in scenarios where you need to drop a lock while performing certain operations, like calling out to other components to avoid deadlocks.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20240814-00/?p=110129\">Temporarily Dropping a Lock: The Anti-lock Pattern</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tThere is a common pattern in C++ of using an RAII type to manage a synchronization primitive. There are different versions of this, but t", "id": 1205923, "language": null, "link": "https://isocpp.org//blog/2024/09/temporarily-dropping-a-lock-the-anti-lock-pattern-raymond-chen", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "Temporarily Dropping a Lock: The Anti-lock Pattern -- Raymond Chen", "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-24T20:21:08+00:00", "description": "<p>\n\tNew video on the CopperSpice YouTube Channel:</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=23iz4DTp7rY\">Template Design With Policy Classes</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Barbara Geller and Ansel Sermersheim</p>\n</blockquote>\n<p>\n\tAbout the video:</p>\n<blockquote>\n\t<p>\n\t\tWe have a new C++ video which discusses Policy Based Design and compares it to other styles of programming. Do you know which design pattern policy based programming solves? Have you considered the benefits of a design which provides a solution at compile time versus run time? Are you using policies and maybe you had no idea they had a name?</p>\n\t<p>\n\t\tPlease take a look and remember to subscribe.</p>\n</blockquote>", "id": 1205201, "language": null, "link": "https://isocpp.org//blog/2024/09/copperspice-template-design-with-policy-classes", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source__id": 314, "source_url": "https://isocpp.org/blog/rss/category/news", "status_code": 0, "tags": [], "thumbnail": null, "title": "CopperSpice: Template Design With Policy Classes", "vote": 0}]