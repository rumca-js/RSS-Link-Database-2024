[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-09T21:15:48+00:00", "description": "<p>\n\t<strong><img alt=\"\" src=\"https://avatars.sched.co/2/1e/19129730/avatar.jpg?aaf\" style=\"width: 250px; height: 250px; float: right;\" />Registration is now open for CppCon 2024!</strong> The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org\">in person in Aurora, CO</a>.&nbsp;To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting some upcoming talks that you will be able to attend this year. Here&rsquo;s another CppCon future talk we hope you will enjoy &ndash; and&nbsp;<strong><a href=\"https://cppcon.org/registration/\">register today</a> for CppCon 2024!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://cppcon2024.sched.com/event/1gZgx/data-structures-that-make-video-games-go-round\">Data Structures That Make Video Games Go Round</a></h3>\n\t<p>\n\t\tFriday, September 20 14:45 - 15:45 MDT</p>\n\t<p>\n\t\tby Al-Afiq Yeong</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tModern video games are complex beasts that contains", "id": 1113342, "language": null, "link": "https://isocpp.org//blog/2024/09/cppcon-2024-data-structures-that-make-video-games-go-round-al-afiq-yeong", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "CppCon 2024 Data Structures That Make Video Games Go Round -- Al-Afiq Yeong", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-09-09T21:01:52+00:00", "description": "<p>\n\t<img alt=\"me.png\" src=\"https://isocpp.org/files/img/me.png\" style=\"width: 250px; margin: 10px; float: right; height: 250px;\" />Previously, we explored a basic implementation of <code>unique_ptr</code> in \"Understanding the Inner Workings of C++ Smart Pointers - The unique_ptr.\" Now, let&#39;s enhance that model by incorporating a custom deleter, similar to what the Standard Library provides.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://andreasfertig.blog/2024/08/understanding-the-inner-workings-of-cpp-smart-pointers-the-unique_ptr-with-custom-deleter/\">Understanding the Inner Workings of C++ Smart Pointers - The Unique_ptr with Custom Deleter</a></h3>\n\t<p>\n\t\tby Andreas Fertig</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tLet&#39;s first establish why somebody would want a custom deleter.</p>\n\t<p>\n\t\tOne example is that the object was allocated via a local heap, and such must be returned by calling the corresponding deallocation function.</p>\n\t<p>\n\t\tAnother example ", "id": 1113343, "language": null, "link": "https://isocpp.org//blog/2024/09/understanding-the-inner-workings-of-cpp-smart-pointers-andreas-fertig", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "Understanding the inner workings of C++ smart pointers -- Andreas Fertig", "user": null, "vote": 0}]