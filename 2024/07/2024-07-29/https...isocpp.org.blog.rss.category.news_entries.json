[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-29T18:36:48+00:00", "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />C++17 introduced <code>std::monostate</code>, a dummy type with no members and trivial functions, primarily used when no action is needed. Despite its simplicity, <code>std::monostate</code> plays a crucial role in scenarios like coroutines and <code>std::variant</code>, where a default-constructible placeholder type is required.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20240708-00/?p=109959\">What&rsquo;s the point of std::monostate? You can&rsquo;t do anything with it!</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tC++17 introduced&nbsp;<code>std::monostate</code>, and I used it&nbsp;<a href=\"https://devblogs.microsoft.com/oldnewthing/20240112-00/?p=109267\" title=\"In C++/WinRT, how can I await multiple coroutines and capture the results?, part", "id": 950904, "language": "en", "link": "https://isocpp.org//blog/2024/07/whats-the-point-of-stdmonostate-you-cant-do-anything-with-it-raymond-chen", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "What\u2019s the point of std::monostate? You can\u2019t do anything with it! -- Raymond Chen", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-29T15:28:42+00:00", "description": "<p>\n\t<strong>Registration is now open for CppCon 2024!</strong> The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org\">in person in Aurora, CO</a>.&nbsp;To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting some upcoming talks that you will be able to attend this year. Here&rsquo;s another CppCon future talk we hope you will enjoy &ndash; and&nbsp;<strong><a href=\"https://cppcon.org/registration/\">register today</a> for CppCon 2024!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://cppcon2024.sched.com/event/1gZeX/creating-a-senderreceiver-http-server\">Creating a Sender/Receiver HTTP Server&nbsp;</a></h3>\n\t<p>\n\t\tMonday, September 16 &bull; 11:00am - 12:00pm MDT</p>\n\t<p>\n\t\tby Dietmar Kuhl</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tThe sender/receiver framework for asynchronous operations in C++ is well on its way towards standardization in C++26. Previously, the theoretical background and implementation o", "id": 949651, "language": "en", "link": "https://isocpp.org//blog/2024/07/cppcon-2024-creating-a-sender-receiver-http-server-dietmar-kuhl", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "CppCon 2024 Creating a Sender/Receiver HTTP Server -- Dietmar Kuhl", "user": null, "vote": 0}]