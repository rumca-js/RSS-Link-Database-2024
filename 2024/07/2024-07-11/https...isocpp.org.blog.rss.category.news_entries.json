[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-11T20:11:32+00:00", "description": "<p>\n\t<img alt=\"logo.png\" src=\"https://isocpp.org/files/img/logo.png\" style=\"width: 225px; margin: 10px; float: right;\" />Last time, we saw how to provide formatting for a simple user-defined class. Spencer Collyer builds on this, showing how to write a formatter for more complicated types.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accu.org/journals/overload/32/181/collyer/\">User-Defined Formatting in std::format &ndash; Part 2</a></h3>\n\t<p>\n\t\tby Spencer Collyer</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tIn the previous article in this series [<a href=\"https://accu.org/journals/overload/32/181/collyer/#_idTextAnchor000\">Collyer24</a>], I showed how to write a class to format user-defined classes using the&nbsp;<code>std::format</code>&nbsp;library. In this article I will describe how this can be extended to container classes or any other class that holds objects whose type is specified by the user of your class.</p>\n\t<p>\n\t\tA note on the code listings:&nbsp;The cod", "id": 850089, "language": "en", "link": "https://isocpp.org//blog/2024/07/user-defined-formatting-in-stdformat-part-2-spencer-collyer", "manual_status_code": 0, "page_rating": 29, "page_rating_contents": 90, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "User-Defined Formatting in std::format \u2013 Part 2 -- Spencer Collyer", "user": null, "vote": 0}]