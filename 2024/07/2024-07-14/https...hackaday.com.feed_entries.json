[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T20:00:09+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"450\" src=\"https://hackaday.com/wp-content/uploads/2024/07/pcb.png?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>When everything used wires, it was easy to splice them or replace them. Not so much with PC boards, but everyone has their favorite method for repairing a broken trace. <a class=\"read-more\" href=\"https://hackaday.com/2024/07/14/five-ways-to-repair-broken-pcb-traces/\">&#8230;read more</a>", "id": 864290, "language": "en-US", "link": "https://hackaday.com/2024/07/14/five-ways-to-repair-broken-pcb-traces", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/pcb.png", "title": "Five Ways to Repair Broken PCB Traces", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T17:00:42+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"533\" src=\"https://hackaday.com/wp-content/uploads/2024/07/with_delay_02_featured.png?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>Cryptography ain&#8217;t easy. Seemingly small details like how many times a computationally intensive loop runs can give the game away. [Lord Feistel] gives us a demo of how this could <a class=\"read-more\" href=\"https://hackaday.com/2024/07/14/undo-arduino-encryption-with-an-oscilloscope/\">&#8230;read more</a>", "id": 863679, "language": "en-US", "link": "https://hackaday.com/2024/07/14/undo-arduino-encryption-with-an-oscilloscope", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/with_delay_02_featured.png", "title": "Undo Arduino Encryption with an Oscilloscope", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T14:00:36+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"450\" src=\"https://hackaday.com/wp-content/uploads/2024/07/vac-wrap-kb-featured.jpg?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>Coloured keycaps are a common customisation when it comes to making your input device special. If you are working with modern tech it&#8217;s easy, there are plenty of vendors who <a class=\"read-more\" href=\"https://hackaday.com/2024/07/14/wrap-your-keyboard-with-a-vacuum-former/\">&#8230;read more</a>", "id": 862942, "language": "en-US", "link": "https://hackaday.com/2024/07/14/wrap-your-keyboard-with-a-vacuum-former", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/vac-wrap-kb-featured.jpg", "title": "Wrap Your Keyboard With A Vacuum Former", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T11:00:52+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"450\" src=\"https://hackaday.com/wp-content/uploads/2024/07/firefox-demise-featured.jpg?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>In a world where so much of our lives depend on the use of online services, the web browser used to access those services becomes of crucial importance. It becomes <a class=\"read-more\" href=\"https://hackaday.com/2024/07/14/ask-hackaday-has-firefox-finally-gone-too-far/\">&#8230;read more</a>", "id": 862528, "language": "en-US", "link": "https://hackaday.com/2024/07/14/ask-hackaday-has-firefox-finally-gone-too-far", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/firefox-demise-featured.jpg", "title": "Ask Hackaday: Has Firefox Finally Gone Too Far?", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T08:00:16+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"426\" src=\"https://hackaday.com/wp-content/uploads/2024/07/roman_dodecahedron_knitting_metal_amy_gaines.jpg?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>Over the years archaeological digs of Roman sites have uncovered many of these strange dodecahedrons, usually made out of metal and with various holes in their faces. With no surviving <a class=\"read-more\" href=\"https://hackaday.com/2024/07/14/the-mysterious-roman-dodecahedron-was-possibly-just-for-knitting/\">&#8230;read more</a>", "id": 861960, "language": "en-US", "link": "https://hackaday.com/2024/07/14/the-mysterious-roman-dodecahedron-was-possibly-just-for-knitting", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/roman_dodecahedron_knitting_metal_amy_gaines.jpg", "title": "The Mysterious Roman Dodecahedron Was Possibly Just For Knitting", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T05:00:28+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"450\" src=\"https://hackaday.com/wp-content/uploads/2024/07/Print-Wave-Metal-Casting_-A-Different-Approach-to-Metal-melting-YouTube-0-2-30.jpeg?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>Direct 3D printing of metal remains out of reach for the hobbyist at the moment, so casting is often the next best thing, particularly given the limitations of 3D printed <a class=\"read-more\" href=\"https://hackaday.com/2024/07/13/print-wave-metal-casting/\">&#8230;read more</a>", "id": 861513, "language": "en-US", "link": "https://hackaday.com/2024/07/13/print-wave-metal-casting", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/Print-Wave-Metal-Casting_-A-Different-Approach-to-Metal-melting-YouTube-0-2-30.jpeg", "title": "Print Wave Metal Casting", "user": null, "vote": 0}, {"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-07-14T02:00:53+00:00", "description": "<div><img alt=\"\" class=\"attachment-large size-large wp-post-image\" height=\"365\" src=\"https://hackaday.com/wp-content/uploads/2024/07/speed_improvement_by_optimization_technique_bilokon_et_al_2023.jpg?w=800\" style=\"margin: 0 auto; margin-bottom: 15px;\" width=\"800\" /></div>With performance optimizations seemingly having lost their relevance in an era of ever-increasing hardware performance, there are still many good reasons to spend some time optimizing code. In a recent <a class=\"read-more\" href=\"https://hackaday.com/2024/07/13/c-design-patterns-for-low-latency-applications/\">&#8230;read more</a>", "id": 861322, "language": "en-US", "link": "https://hackaday.com/2024/07/13/c-design-patterns-for-low-latency-applications", "manual_status_code": 0, "page_rating": 30, "page_rating_contents": 95, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://hackaday.com/feed", "source_obj__id": 140, "status_code": 0, "tags": [], "thumbnail": "https://hackaday.com/wp-content/uploads/2024/07/speed_improvement_by_optimization_technique_bilokon_et_al_2023.jpg", "title": "C++ Design Patterns for Low-Latency Applications", "user": null, "vote": 0}]