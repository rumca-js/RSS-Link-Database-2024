[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-04-30T00:00:00+00:00", "description": "<p>In the <a href=\"https://www.cppstories.com/2024/expected-cpp23/\">article about <code>std::expected,</code></a> I introduced the type and showed some basic examples, and in this text, you&rsquo;ll learn how it is implemented.</p>\n<h2 id=\"a-simple-idea-with-struct\">\nA simple idea with <code>struct</code> \n  \n<a class=\"hash-link\" href=\"#a-simple-idea-with-struct\">\n<svg class=\"fill-current o-60 hover-accent-color-light\" height=\"24\" viewBox=\"0 0 24 24\" width=\"22\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71.0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76.0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg>\n    </a>&nbsp;\n    \n</h2>\n\n<p>In short, <code>std::expected</code> should contain two data members: the actual expected value and the unexpected error object. So, in theory, we could use a simple structure:</p>\n<div cla", "language": "en-us", "link": "https://www.cppstories.com/2024/expected-cpp23-internals", "manual_status_code": 0, "page_rating": 100, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://www.cppstories.com/index.xml", "source_obj__id": 47, "status_code": 0, "tags": [], "thumbnail": null, "title": "Understand internals of std::expected", "user": null, "vote": 0}]