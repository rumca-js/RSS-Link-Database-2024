[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-04-22T19:40:18+00:00", "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />During the last two weeks, we saw a bug related to uninitialized values and undefined behaviour, we listed the different kinds of initializations in C++ and we started to more detailed discovery with copy-initialization. This week, we continue this discovery with direct-, list- and aggregate-initialization.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2024/04/17/initializations-part-2\">When and How Variables are Initialized? - Part 2</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tDirect-initialization initializes an object from an explicit set of constructor arguments. Different syntaxes invoke direct initialization such as&nbsp;<code>T object(&lt;at least one arg&gt;);</code>,&nbsp;<code>T(&lt;at least one arg&gt;);</code>&nb", "language": "en", "link": "https://isocpp.org//blog/2024/04/when-and-how-variables-are-initialized-part-2-sandor-dargo", "manual_status_code": 0, "page_rating": 100, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "When and How Variables are Initialized? - Part 2 -- Sandor Dargo", "user": null, "vote": 0}]