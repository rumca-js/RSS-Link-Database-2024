[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-05-02T19:43:57+00:00", "description": "<p>\n\t<img alt=\"logo.png\" src=\"https://isocpp.org/files/img/logo.png\" style=\"width: 225px; margin: 10px; float: right;\" />std::format allows us to format values quickly and safely. Spencer Collyer demonstrates how to provide formatting for a simple user-defined class.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accu.org/journals/overload/32/180/collyer/\">User-Defined Formatting in std::format</a></h3>\n\t<p>\n\t\tby Spencer Collyer</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tSince my previous article was first published, based on the draft C++20 standard, the paper [<a href=\"https://accu.org/journals/overload/32/180/collyer/#_idTextAnchor002\">P2216</a>] was published which changes the interface of the&nbsp;<code>format</code>,&nbsp;<code>format_to</code>,&nbsp;<code>format_to_n</code>, and&nbsp;<code>formatted_size</code>&nbsp;functions. They no longer take a&nbsp;<code>std::string_view</code>&nbsp;as the format string, but instead a&nbsp;<code>std::format_string</code>&n", "language": "en", "link": "https://isocpp.org//blog/2024/05/user-defined-formatting-in-stdformat-spencer-collyer", "manual_status_code": 0, "page_rating": 32, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://isocpp.org/blog/rss/category/news", "source_obj__id": 314, "status_code": 0, "tags": [], "thumbnail": null, "title": "User-Defined Formatting in std::format -- Spencer Collyer", "user": null, "vote": 0}]