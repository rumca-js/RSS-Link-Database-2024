[{"age": null, "album": "", "artist": null, "bookmarked": false, "comments": [], "date_published": "2024-05-06T00:00:00+00:00", "description": "<p><code>std::expected</code> from C++23 not only serves as an error-handling mechanism but also introduces functional programming paradigms into the language. In this blog post, we&rsquo;ll have a look at functional/monadic extensions of <code>std::expected,</code> which allow us to chain operations elegantly, handling errors at the same time. The techniques are very similar to <code>std::optional</code> extensions - see <a href=\"https://www.cppstories.com/2023/monadic-optional-ops-cpp23/\">How to Use Monadic Operations for `std::optional` in C++23 - C++ Stories</a>.</p>\n<p>Here\u2019s a brief overview of these functional capabilities:</p>\n<h2 id=\"and_then\">\n<code>and_then()</code> \n  \n<a class=\"hash-link\" href=\"#and_then\">\n<svg class=\"fill-current o-60 hover-accent-color-light\" height=\"24\" viewBox=\"0 0 24 24\" width=\"22\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76.0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71.0", "language": "en-us", "link": "https://www.cppstories.com/2024/expected-cpp23-monadic", "manual_status_code": 0, "page_rating": 32, "page_rating_contents": 100, "page_rating_visits": 0, "page_rating_votes": 0, "permanent": false, "source": "https://www.cppstories.com/index.xml", "source_obj__id": 47, "status_code": 0, "tags": [], "thumbnail": null, "title": "std::expected - Monadic Extensions", "user": null, "vote": 0}]